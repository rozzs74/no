1.) ZeroMQ - eroMQ is a high-performance asynchronous messaging library, 
aimed at use in distributed or concurrent applications. It provides a message queue, 
but unlike message-oriented middleware, a ZeroMQ system can run without a dedicated message broker.

For javascript referrence refer to this --> https://github.com/JustinTulloss/zeromq.node
ZMQ requires to configure the npm installer to python2.7

	Installation for zmq
	1.) If you're in macOS install first the native way by 
	---> brew install zmq
	2.) Make sure your npm configuration is set to python2.x as requirement for node-gyp rebuilding process
	3.) npm install zmq
	4.) Once success run this command in terminal 
	---> node --harmony -p -e 'require("zmq")'
	5.) That's it

	Advantages of using zeromq are:
	a.) ØMQ endpoints automatically reconnect if they become unhitched for any reason—like if there’s a hiccup in the network or if a process restarts.
	b.) ØMQ delivers only whole messages, so you don’t have to create buffers to deal with chunked data.
	c.) ØMQ’s low-overhead protocol takes care of many routing details, like sending responses back to the correct clients.

2.) Messaging pattern - a messaging pattern is a network-oriented architectural pattern which describes how two different parts of a message passing system connect and communicate with each other.
3.) PUB-SUB(publish-subscribe) - s a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers, but instead categorize published messages into classes without knowledge of which subscribers, if any, there may be.
4.) REP/REQ pattern = reply and request one at time. Only operates on one request or one response at a time. No parallelism.
5.) ROUTER / DEALER = Router socket can handle many request simultaneously. It remembers which connection each request came from and
will route reply messages accordingly. We can say that router socket is a parallel rep socket. Next is dealer socket it can send 
multiple request in parallel and simply we can describe as a dealer socket is a parallel req socket.

6.) Clustering - In multithreaded systems, doing more work in parallel means spinning up more threads. But Node.js uses a single-threaded event loop, so to take advantage of multiple cores or multiple processors on the same computer, you have to spin up more Node processes.
This is called clustering and it’s what Node’s built-in cluster module does. 
Clustering is a useful technique for scaling up your Node application when there’s unused CPU capacity available.
 Scaling a Node application is a big topic with lots of choices based on your particular scenario, but no matter how you end up doing it, you’ll probably start with clustering.

7.) IPC -  inter-process communication or interprocess communication (IPC) refers specifically to the mechanisms an operating system provides to allow the processes to manage shared data. 
Typically, applications can use IPC, categorized as clients and servers, where the client requests data and the server responds to client requests.

8.) PUSH / PULL pattern = PUSH and PULL socket types are useful when you have a queue of jobs that you want to fairly
assign among a pool of available workers...